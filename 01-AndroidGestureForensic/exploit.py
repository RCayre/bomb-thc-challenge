import hashlib
import binascii
import os,time

def showPattern(text):
	def display(i):
		for a in range(0,3):
			for b in range(0,3):
				print "\x1b[32mo\x1b[37m" if a*3+b==i else "o",
			print ""
	os.system("clear")
	for p in text:
		display(int(p))
		time.sleep(1)
		os.system("clear")

filename = 'gesture.key'
with open(filename, 'rb') as f:
    content = f.read()
pattern = binascii.hexlify(content)


def expand(i):
	return str(i)

def check(cleartext):
	global pattern
	new = ""
	for i in cleartext:
		if i=="0":
			new += "\x00"
		elif i=="1":
			new += "\x01"
		elif i=="2":
			new += "\x02"
		elif i=="3":
			new += "\x03"
		elif i=="4":
			new += "\x04"
		elif i=="5":
			new += "\x05"
		elif i=="6":
			new += "\x06"
		elif i=="7":
			new += "\x07"
		elif i=="8":
			new += "\x08"

	hsh = hashlib.sha1(new).hexdigest()
	print cleartext+ " -> " + hsh
	if hsh == pattern:
		print "FOUND : "+cleartext
		answer = ""
		while answer not in  ("Y","N"):
			answer = raw_input("Visualiser le pattern ? [Y/N] :")
		if answer == "Y":
			showPattern(cleartext)			
		
		exit()

for a in range(0,9):
	check(expand(a))
	for b in range(0,9):
		if (a != b):
			check( expand(a)+expand(b))
			for c in range(0,9):
				if b!=c:
					check( expand(a)+expand(b)+expand(c))
					for d in range(0,9):
						if c!=d:
							check( expand(a)+expand(b)+expand(c)+expand(d))
							for e in range(0,9):
								if d!=e:
									check( expand(a)+expand(b)+expand(c)+expand(d)+expand(e))
									for f in range(0,9):
										if e!=f:
											check( expand(a)+expand(b)+expand(c)+expand(d)+expand(e)+expand(f))
											for g in range(0,9):
												if f!=g:
													check( expand(a)+expand(b)+expand(c)+expand(d)+expand(e)+expand(f)+expand(g))
